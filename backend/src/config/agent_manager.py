"""
Agent configuration manager for Perplexity OSS.

Handles automatic agent creation and ID storage to reduce setup friction.
Priority order: ENV vars ‚Üí config file ‚Üí auto-create agents
"""

import json
import os
import sys
import time
from datetime import datetime
from pathlib import Path
from typing import Dict, Optional
import httpx

# Import fcntl only on Unix systems
if sys.platform != "win32":
    import fcntl

# Import agent configurations
from llm.agent_config import (
    ANSWER_GENERATION_AGENT,
    QUERY_PLANNING_AGENT,
    QUERY_REPHRASE_AGENT,
    SEARCH_QUERY_AGENT,
    RELATED_QUESTIONS_AGENT,
)

# Config file location (Docker volume mount point)
CONFIG_DIR = Path(os.getenv("AGENT_CONFIG_DIR", "/app/config"))
CONFIG_FILE = CONFIG_DIR / "agents.json"

# Agent role mapping
AGENT_CONFIGS = {
    "answer_generation": ANSWER_GENERATION_AGENT,
    "query_planning": QUERY_PLANNING_AGENT,
    "query_rephrase": QUERY_REPHRASE_AGENT,
    "search_query": SEARCH_QUERY_AGENT,
    "related_questions": RELATED_QUESTIONS_AGENT,
}

# Environment variable mapping
ENV_VAR_MAP = {
    "answer_generation": "LYZR_ANSWER_GENERATION_AGENT_ID",
    "query_planning": "LYZR_QUERY_PLANNING_AGENT_ID",
    "query_rephrase": "LYZR_QUERY_REPHRASE_AGENT_ID",
    "search_query": "LYZR_SEARCH_QUERY_AGENT_ID",
    "related_questions": "LYZR_RELATED_QUESTIONS_AGENT_ID",
}


class AgentConfigManager:
    """Manages agent configuration with auto-creation support."""

    def __init__(self, api_key: str = None, api_base: str = None):
        self.api_key = api_key or os.getenv("LYZR_API_KEY")
        self.api_base = api_base or os.getenv(
            "LYZR_API_BASE", "https://agent-prod.studio.lyzr.ai"
        )

        if not self.api_key:
            raise ValueError("LYZR_API_KEY is required for agent management")

        # Ensure config directory exists
        CONFIG_DIR.mkdir(parents=True, exist_ok=True)

    def load_from_env(self) -> Optional[Dict[str, str]]:
        """
        Load agent IDs from environment variables.
        Returns None if any required agent ID is missing.
        """
        agent_ids = {}
        for role, env_var in ENV_VAR_MAP.items():
            agent_id = os.getenv(env_var, "").strip()
            # Skip if empty, None, or placeholder value
            if not agent_id or agent_id.startswith("your_") or agent_id == "":
                # Missing or placeholder value - need to check all before returning None
                return None
            agent_ids[role] = agent_id

        print("‚úì Loaded agent IDs from environment variables")
        return agent_ids

    def load_from_file(self) -> Optional[Dict[str, str]]:
        """Load agent IDs from config file if it exists."""
        if not CONFIG_FILE.exists():
            return None

        try:
            with open(CONFIG_FILE, "r") as f:
                config = json.load(f)

            agent_ids = config.get("agent_ids", {})

            # Validate we have all required agents
            if set(agent_ids.keys()) >= set(ENV_VAR_MAP.keys()):
                print(f"‚úì Loaded agent IDs from config file: {CONFIG_FILE}")
                return agent_ids
            else:
                print(f"‚ö† Config file incomplete, missing agents")
                return None

        except (json.JSONDecodeError, KeyError) as e:
            print(f"‚ö† Error reading config file: {e}")
            return None

    def save_to_file(self, agent_ids: Dict[str, str]) -> None:
        """
        Save agent IDs to config file with atomic write.
        Uses file locking to prevent race conditions.
        """
        config_data = {
            "agent_ids": agent_ids,
            "created_at": datetime.utcnow().isoformat(),
            "api_base": self.api_base,
            "note": "Auto-generated by Perplexity OSS. Do not edit manually unless necessary.",
        }

        # Write to temporary file first
        temp_file = CONFIG_FILE.with_suffix(".tmp")

        try:
            with open(temp_file, "w") as f:
                # Lock file during write (Unix only, Windows doesn't need this)
                if sys.platform != "win32":
                    fcntl.flock(f.fileno(), fcntl.LOCK_EX)

                json.dump(config_data, f, indent=2)

                if sys.platform != "win32":
                    fcntl.flock(f.fileno(), fcntl.LOCK_UN)

            # Atomic replace
            temp_file.replace(CONFIG_FILE)
            print(f"‚úì Saved agent IDs to {CONFIG_FILE}")

        except Exception as e:
            print(f"‚úó Error saving config file: {e}")
            if temp_file.exists():
                temp_file.unlink()
            raise

    async def create_agent(
        self, role: str, config: Dict, retry_count: int = 3
    ) -> str:
        """
        Create a single agent via Lyzr API.
        Returns the agent ID.
        """
        url = f"{self.api_base}/v3/agents/"
        headers = {
            "Content-Type": "application/json",
            "x-api-key": self.api_key,
        }

        # Build payload from config
        # Note: agent_config.py uses different keys than API expects
        payload = {
            "name": config["name"],
            "description": config["description"],
            "system_prompt": config["agent_instructions"],
            "provider_id": config["provider_id"],
            "model": config["model"],
            "temperature": float(config["temperature"]),
            "top_p": float(config["top_p"]),
            "llm_credential_id": config["llm_credential_id"],
            "features": config.get("features", []),
            "response_format": config.get("response_format", {}),
            "store_messages": config.get("store_messages", True),
            "file_output": config.get("file_output", False),
        }

        print(f"Creating {role} agent: {config['name']}...")

        for attempt in range(retry_count):
            try:
                async with httpx.AsyncClient(timeout=30.0) as client:
                    response = await client.post(url, headers=headers, json=payload)
                    response.raise_for_status()

                    result = response.json()
                    print(f"API Response for {role}: {result}")

                    # Handle different response structures
                    if "id" in result:
                        agent_id = str(result["id"])
                    elif "agent_id" in result:
                        agent_id = str(result["agent_id"])
                    elif isinstance(result, dict) and "data" in result and "id" in result["data"]:
                        agent_id = str(result["data"]["id"])
                    else:
                        raise Exception(f"Could not find agent ID in response: {result}")

                    print(f"‚úì Created {role} agent with ID: {agent_id}")
                    return agent_id

            except httpx.HTTPStatusError as e:
                if e.response.status_code == 429 and attempt < retry_count - 1:
                    # Rate limited, retry with backoff
                    wait_time = (attempt + 1) * 2
                    print(f"Rate limited, retrying in {wait_time}s...")
                    time.sleep(wait_time)
                    continue
                else:
                    print(f"‚úó Error creating {role} agent: {e.response.text}")
                    raise

            except Exception as e:
                print(f"‚úó Error creating {role} agent: {e}")
                raise

        raise Exception(f"Failed to create {role} agent after {retry_count} attempts")

    async def create_all_agents(self) -> Dict[str, str]:
        """
        Create all required agents via Lyzr API.
        Returns a dict mapping role -> agent_id.
        """
        print("\n" + "=" * 60)
        print("ü§ñ Auto-creating Lyzr agents for Perplexity OSS...")
        print("=" * 60 + "\n")

        agent_ids = {}

        for role, config in AGENT_CONFIGS.items():
            try:
                agent_id = await self.create_agent(role, config)
                agent_ids[role] = agent_id
                # Small delay to avoid rate limiting
                time.sleep(0.5)
            except Exception as e:
                print(f"‚úó Failed to create {role} agent: {e}")
                # Clean up any agents we created
                print("Rolling back agent creation...")
                # TODO: Could add cleanup logic here if needed
                raise Exception(
                    f"Agent creation failed for {role}. Please check your API key and try again."
                )

        print("\n" + "=" * 60)
        print("‚úì All agents created successfully!")
        print("=" * 60 + "\n")

        return agent_ids

    async def ensure_agents_exist(self) -> Dict[str, str]:
        """
        Ensure all required agents exist.
        Priority: ENV vars ‚Üí config file ‚Üí auto-create

        Returns a dict mapping role -> agent_id.
        """
        # 1. Check environment variables first
        agent_ids = self.load_from_env()
        if agent_ids:
            return agent_ids

        # 2. Check config file
        agent_ids = self.load_from_file()
        if agent_ids:
            return agent_ids

        # 3. Auto-create agents (with lock to prevent duplicates)
        lock_file = CONFIG_DIR / "agents.lock"

        try:
            # Create lock file
            with open(lock_file, "w") as lock:
                if sys.platform != "win32":
                    # Try to acquire exclusive lock (non-blocking)
                    try:
                        fcntl.flock(lock.fileno(), fcntl.LOCK_EX | fcntl.LOCK_NB)
                    except BlockingIOError:
                        # Another process is creating agents, wait for it
                        print("‚è≥ Another process is creating agents, waiting...")
                        fcntl.flock(lock.fileno(), fcntl.LOCK_EX)  # Blocking

                        # Check if config was created while we waited
                        agent_ids = self.load_from_file()
                        if agent_ids:
                            fcntl.flock(lock.fileno(), fcntl.LOCK_UN)
                            return agent_ids

                # Double-check config doesn't exist (race condition)
                agent_ids = self.load_from_file()
                if agent_ids:
                    if sys.platform != "win32":
                        fcntl.flock(lock.fileno(), fcntl.LOCK_UN)
                    return agent_ids

                # Create agents
                agent_ids = await self.create_all_agents()

                # Save to file
                self.save_to_file(agent_ids)

                if sys.platform != "win32":
                    fcntl.flock(lock.fileno(), fcntl.LOCK_UN)

                return agent_ids

        finally:
            # Clean up lock file
            if lock_file.exists():
                try:
                    lock_file.unlink()
                except:
                    pass

    def get_agent_id(self, role: str, agent_ids: Dict[str, str]) -> str:
        """Get a specific agent ID from the config."""
        agent_id = agent_ids.get(role)
        if not agent_id:
            raise ValueError(f"Agent ID for {role} not found in configuration")
        return agent_id


# Synchronous loading (without auto-creation)
def load_agent_config_sync(api_key: str = None, api_base: str = None) -> Optional[Dict[str, str]]:
    """
    Synchronously load agent configuration from env or file.
    Does NOT auto-create agents (use ensure_agents_exist_async for that).
    Returns None if agents need to be created.
    """
    manager = AgentConfigManager(api_key, api_base)

    # Try environment variables first
    agent_ids = manager.load_from_env()
    if agent_ids:
        return agent_ids

    # Try config file
    agent_ids = manager.load_from_file()
    if agent_ids:
        return agent_ids

    # No agents found - caller should create them
    return None


# Async function for auto-creation
async def ensure_agents_exist_async(api_key: str = None, api_base: str = None) -> Dict[str, str]:
    """
    Async function to ensure agents exist (will auto-create if needed).
    Use this at app startup or in async contexts.
    """
    manager = AgentConfigManager(api_key, api_base)
    return await manager.ensure_agents_exist()
